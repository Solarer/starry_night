#!/usr/bin/env python
# coding: utf-8
'''
Usage:
    starry_night -c <confFile> [-f <image>... | -d <directory> | -l <posFile>] [options]

Options:
    --version       Show version.
    --debug         debug it [default: False]
    -f IMAGE        Image file(s)
    -d DIRECTORY    Directory that contains image files. (Recursive!)
    -l POSFILE      File that contains Positions and timestamps to analyse
    -t TIME         Image time
    -c CONFIG       Configuration file
    -v              Visual output
'''

from __future__ import print_function
import pkg_resources
import logging
import os
import sys
import time
from docopt import docopt
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import numpy as np
import configparser
from pkg_resources import resource_filename
import skimage.filters

from starry_night import skycam
from IPython import embed


__version__ = pkg_resources.require('starry_night')[0].version
directory = os.path.join(os.environ['HOME'], '.starry_night')
if not os.path.exists(directory):
    os.makedirs(directory)

# setup logging
log = logging.getLogger('starry_night')
log.setLevel(logging.DEBUG)
logfile_path = os.path.join(
    directory, 'starry_night.log'
    )
# create handler for file and console output
logfile_handler = logging.FileHandler(filename=logfile_path)
logstream_handler = logging.StreamHandler()
logfile_handler.setLevel(logging.DEBUG)
logstream_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter(
    fmt='%(asctime)s - %(levelname)s - %(name)s | %(message)s',
    datefmt='%H:%M:%S',
)
formatter.converter = time.gmtime  # use utc in log
logfile_handler.setFormatter(formatter)
logstream_handler.setFormatter(formatter)
log.addHandler(logfile_handler)
log.addHandler(logstream_handler)
logging.captureWarnings(True)




def main(args):
    log.info('starry_night started')
    log.info('version: {}'.format(__version__))
    
    if args['--debug']:
        log.info('DEBUG MODE - NOT FOR REGULAR USE')
        log.setLevel(logging.DEBUG)
        log.debug('started starry_night in debug mode')


    print(args)
    # TODO: read config file to obtain URL and stuff
    log.debug('Parsing config file: {}'.format(args['-c']))
    config = configparser.RawConfigParser()
    config.read(resource_filename(
        'starry_night', '../data/{}'.format(args['-c']))
    )


    # download current image from URL
    if args['-f'] is None:
        log.info('Do an online analysis of an image file')
        try:
            img = skycam.downloadImg(
                config['properties']['url'],
                timeout=5,
            )
            log.debug('Download finished')
        except:
            log.error('Download of image failed')
            raise

        time = datetime.utcnow()
    # use the image provided by the user
    elif len(args['-f']) == 1:
        log.info('Do an offline analysis of an image file')
        img, time = skycam.loadImageAndTime(args['-f'][0], crop=config['crop'], fmt=config['image']['timestamp'])
        time = time + timedelta(minutes=-5)
        log.debug('Opened image: {}'.format(args['-f']))
    else:
        log.error('Can not process a list of files yet')
        sys.exit(1)
        

    # store image and additional data in dict
    image = dict({
            'img': img,
            'timestamp': time,
            'log': np.zeros(1),
            })
    log.debug('Image time: {}'.format(time))

    log.debug('Creating Observer')
    obs = skycam.obs_setup(time)
    log.debug('Parsing Catalogue')
    stars, planets, moon, sun = skycam.star_planets_moon_sun_dataframes(
            obs, 
            cam=config['image'],
            )

    # calculate x and y position
    stars['x'], stars['y'] = skycam.horizontal2image(stars.azimuth, stars.altitude, cam=config['image'])
    planets['x'], planets['y'] = skycam.horizontal2image(planets.azimuth, planets.altitude, cam=config['image'])
    moon['x'], moon['y'] = skycam.horizontal2image(moon['azimuth'], moon['altitude'], cam=config['image'])


    #if args['--log']:
    #    image['log'] = skimage.filter
    lap= skimage.filters.laplace(img, ksize=3)

    if args['-v']:
        fig = plt.figure()
        ax = fig.add_subplot(111)
        ax.imshow(img, cmap='Greys_r', interpolation='none')
        #stars.plot.scatter(x='x', y='y', ax=ax, marker='x', grid=True, label='stars')
        plt.legend()
        #plt.colorbar()
        plt.show()






''' Main Loop '''
if __name__ == '__main__':
    args = docopt(
        doc=__doc__,
        version=__version__,
        )
    try:
        main(args)
    except (KeyboardInterrupt, SystemExit):
        log.info('Exit')
    except:
        raise
