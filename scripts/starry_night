#!/usr/bin/env python
# coding: utf-8
'''
Usage:
    starry_night -c <confFile> [options]
    starry_night [(offline <image>)] [options]

Options:
    --version       Show version.
    --debug         debug it [default: False]
    -f IMAGE        Image file
    -t TIME         Image time
    -c CONFIG       Configuration file
'''

from __future__ import print_function
import pkg_resources
import logging
import os
import sys
import time
from docopt import docopt
import matplotlib.pyplot as plt
from datetime import datetime
import configparser
from pkg_resources import resource_filename

from starry_night import skycam
from IPython import embed

print('starry_night name: {}'.format(__name__))

__version__ = pkg_resources.require('starry_night')[0].version
directory = os.path.join(os.environ['HOME'], '.starry_night')
if not os.path.exists(directory):
    os.makedirs(directory)

# setup logging
log = logging.getLogger('starry_night')
log.setLevel(logging.DEBUG)
logfile_path = os.path.join(
    directory, 'starry_night.log'
    )
# create handler for file and console output
logfile_handler = logging.FileHandler(filename=logfile_path)
logstream_handler = logging.StreamHandler()
logfile_handler.setLevel(logging.DEBUG)
logstream_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter(
    fmt='%(asctime)s - %(levelname)s - %(name)s | %(message)s',
    datefmt='%H:%M:%S',
)
formatter.converter = time.gmtime  # use utc in log
logfile_handler.setFormatter(formatter)
logstream_handler.setFormatter(formatter)
log.addHandler(logfile_handler)
log.addHandler(logstream_handler)
logging.captureWarnings(True)




def main(args):
    log.info('starry_night started')
    log.info('version: {}'.format(__version__))
    
    if args['--debug']:
        print('DEBUG MODE - NOT FOR REGULAR USE')
        log.setLevel(logging.DEBUG)
        log.debug('started starry_night in debug mode')


    print(args)
    # TODO: read config file to obtain URL and stuff
    log.debug('Parsing config file: {}'.format(args['-c']))
    config = configparser.ConfigParser()
    config.read(resource_filename(
        'starry_night', '../data/{}'.format(args['-c']))
    )


    # download current image from URL
    if not args['offline']:
        log.info('Do an online analysis of an image file')
        try:
            img = skycam.downloadImg(
                config['properties']['url'],
                timeout=5,
            )
            log.debug('Download finished')
        except:
            log.error('Download of image failed')
            raise

        time = datetime.utcnow()
    # use the image provided by the user
    else:
        log.info('Do an offline analysis of an image file')
        img = skycam.loadCamImage(args['file'])

    # store image and additional data in dict
    image = dict({
            'img': img,
            'timestamp': time,
            })

    log.debug('Creating Observer')
    obs = skycam.obs_setup(time)
    log.debug('Parsing Catalogue')
    stars, planets, moon = skycam.star_planets_moon_dataframe(obs, rotation=0, altitude=10, vmag=4)

    stars['x'], stars['y'] = skycam.horizontal2image(stars.azimuth, stars.altitude, radius=300, zenith_x=320, zenith_y=240)
    planets['x'], planets['y'] = skycam.horizontal2image(planets.azimuth, planets.altitude, radius=300, zenith_x=320, zenith_y=240)
    moon['x'], moon['y'] = skycam.horizontal2image(moon['azimuth'], moon['altitude'], radius=300, zenith_x=320, zenith_y=240)

    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.imshow(img, cmap='Greys_r')
    stars.plot.scatter(x='x', y='y', ax=ax, grid=True)
    #plt.colorbar()
    plt.show()






''' Main Loop '''
if __name__ == '__main__':
    args = docopt(
        doc=__doc__,
        version=__version__,
        )
    try:
        main(args)
    except (KeyboardInterrupt, SystemExit):
        log.info('Exit')
    except:
        raise
