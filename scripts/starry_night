#!/usr/bin/env python
# coding: utf-8
'''
Usage:
    starry_night -c <confFile> [<image>...] [options]
    starry_night -c <confFile> --daemon

Options:
                    If none
    <image>         Image file(s) or folder(s)
    -p <posFile>    File that contains Positions and timestamps to analyse
    -t Time         Force to use this time and do not parse image name
    -c Camera       Provide a camera config file or use one of these names: 'GTC', 'Magic' or 'CTA'
    -v              Visual output
    -s              Save output to files
    --kernel=<k>    Try different kernel sizes from 1 to <k> in steps of 5
    --function=<f>  Function used for calculation of response ('Grad','Sobel','LoG', 'All')
                    Using option '--ratescan' implies 'LoG'. [default: LoG]

    --cam           Display camera image
    --ratescan      Create ratescan-like plot of visibility vs kernel response threshold
    --response      Plot response vs Magnitude in log scale 
    --cloudmap      Create cloud map of the sky
    --cloudtrack    Track and predict clouds as they move
    --single        Display information for every single image
    --airmass       Calculate airmass absorbtion
    --sql           Store results in SQL database
    --low-memory    Don't store results of each image in memory for final processing. 
                    Use this option if you are not planning to merge the results because the 
                    amount of files is too big or because you run this as a daemon at night.
    --daemon        Run as daemon during the night, no input possible.
    --version       Show version.
    --debug         debug it [default: False]
'''

from __future__ import print_function
from docopt import docopt
import pkg_resources
import logging
import os
import sys
import time
import numpy as np
import pandas as pd
import configparser
import matplotlib.pyplot as plt
import skimage.filters
from matplotlib import rc, cm
from datetime import datetime, timedelta
from multiprocessing import Pool
from functools import partial
from scipy.optimize import curve_fit
from re import split
from collections import Counter
from getpass import getpass
from sqlalchemy import create_engine

from sqlalchemy.exc import OperationalError
from requests.exceptions import Timeout
from tables import HDF5ExtError


from starry_night import skycam, cloud_tracker
from IPython import embed

def wrapper(const_celestialObjects, config, args, img):
    return skycam.process_image(skycam.getImageDict(img, config), const_celestialObjects, config, args)

__version__ = pkg_resources.require('starry_night')[0].version
directory = os.path.join(os.environ['HOME'], '.starry_night')
if not os.path.exists(directory):
    os.makedirs(directory)

# create handler for file and console output
logfile_path = os.path.join(
    directory, 'starry_night.log'
    )
logfile_handler = logging.FileHandler(filename=logfile_path)
logstream_handler = logging.StreamHandler()
formatter = logging.Formatter(
    fmt='%(asctime)s - %(levelname)s - %(name)s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
)
formatter.converter = time.gmtime  # use utc in log
logfile_handler.setFormatter(formatter)
logstream_handler.setFormatter(formatter)

# setup logging
logging.basicConfig(
        handlers = [
            logfile_handler,
            logstream_handler,
            ],
        level=logging.INFO,
        )
logging.captureWarnings(True)


def main(args):
    log = logging.getLogger('starry_night')
    log.info('starry_night started')
    log.info('version: {}'.format(__version__))
    
    if args['--debug']:
        log.info('DEBUG MODE - NOT FOR REGULAR USE')
        log.setLevel(logging.DEBUG)
        log.debug('started starry_night in debug mode')
        #print(args)

    config = configparser.RawConfigParser()
    log.debug('Parsing config file: {}'.format(args['-c']))
    # configfile can be a filepath or a name of a predefined config file
    if '.' in args['-c'] or '/' in args['-c']:
        conf_succ = len(config.read(args['-c']))
    else:
        conf_succ = len(config.read(pkg_resources.resource_filename(
            'starry_night', 'data/{}_cam.config'.format(args['-c']))
        ))
    # conf_succ != 0 if config was read successfully
    if conf_succ == 0:
        log.error('Unable to parse config file. Does the file exist?')
        sys.exit(1)
    del conf_succ

    # prepare everything for sql connection
    if args['--sql']:
        log.info('Storing results in SQL Database.\nConnection: {}\nPlease enter password'.format(config['SQL']['connection']))
        config['SQL']['connection'] = config['SQL']['connection'].format(getpass())
        try:
            engine = create_engine(config['SQL']['connection'])
            if not engine.execute('SELECT VERSION();'):
                log.error('SQL connection failed! Aborting')
                sys.exit(1)
            del engine
        except OperationalError as e:
            log.error(e)
            sys.exit(1)


    log.debug('Parsing Catalogue')
    data = skycam.celObjects_dict(config)

    # read positioning file if any
    if args['-p']:
        log.info('Parsing positioning file. This might take a while')
        try:
            data['positioning_file'] = pd.read_hdf(args['-p'], key='table')[['MJD','ra','dec']]
        except (IOError, HDF5ExtError) as e:
            log.error(e.args[0])

    log.debug('Aquire Image(s)')
    results = list()

    if not args['<image>']:
        # download image(s) from URL
        lastDownload = lastDownload=datetime(1,1,1)
        while 1:
            log.info('Downloading image from {}'.format(config['properties']['url']))
            try:
                img = skycam.downloadImg(
                    config['properties']['url'],
                    timeout=5,
                )
                lastDownload = datetime.utcnow()
                log.debug('Download finished')
            except skycam.TooEarlyError as e:
                log.info('No new image available. Try again in 30 s.')
                time.sleep(30)
                continue
            except Timeout as e:
                log.error('Download of image failed. Try again in 30 s. {}'.format(e))
                time.sleep(30)
                continue
                
            img['timestamp'] += timedelta(minutes=float(config['properties']['timeoffset']))
            skycam.process_image(img, data, config, args)

    else:
        # use image(s) provided by the user and search for directories
        i = 0
        maxLen = len(args['<image>']) 
        while maxLen > i:
            if os.path.isdir(args['<image>'][i]):
                _dir = args['<image>'].pop(i)
                for root, dirs, files in os.walk(_dir):
                    for f in files:
                        args['<image>'].append(os.path.join(root,f))
            i += 1

        # no multiprocessing if only a single image was found
        if len(args['<image>']) == 1:
            if args['-t'] is not None:
                images['timestamp'] = datetime(args['-t'])
        imgCount = len(args['<image>'])

        log.info('Processing {} images.'.format(imgCount))
        par = partial(wrapper, data, config, args)

        # don't use multiprocessing in debug mode
        # process all images and store results
        if args['--debug']:
            for img in args['<image>']:
                results.append(par(img))
        else:
            pool = Pool(maxtasksperchild=50)
            results = pool.map(par, args['<image>'])
            pool.close()
            pool.join()

    # drop all empty dics (image processing was aborted because of high sun)
    # and merge the remaining files
    i=0
    while i<len(results):
        if not results[i]:
            results.pop(i)
        else:
            i+=1
    
    imgCount = len(results)
    log.info('{} images were processed successfully.'.format(imgCount))

    # no more processing if no images were processed successfully
    if len(results) <= 1:
        sys.exit(0)

    if args['--low-memory']:
        log.info('Option \'low-memory\'activated. No more processing')
        embed()
        sys.exit(0)
    star_list = list(map(lambda x: x['stars'], results))
    timestamp_list = list(map(lambda x: x['timestamp'], results))
    if args['--cloudtrack']:
        cloudmap_list = list(map(lambda x: x['cloudmap'], results))

    df = pd.concat(star_list, keys=timestamp_list, names=['date','HIP'])
    del results
    del star_list
    del timestamp_list

    df.sortlevel(inplace=True)
    #d.loc[(slice(None), 746), :]
    #d.loc[(slice(None), 746),:]['response3'].plot.hist(10)

    mean = df.mean(level=1)[df.count(level=1)['vmag'].values > len(df.index.levels[0])/2]
    std = df.std(level=1)[df.count(level=1)['vmag'].values > len(df.index.levels[0])/2]

    # we need a big data set for averaging, so only stars with > 10 data points are allowed
    df.reset_index(inplace=True)
    df = df.groupby('HIP').filter(lambda x : len(x.index) > 10)

    if args['--airmass']:
        if not args['--debug']:
            log.error('This option is only available in debug mode')
        else:
            '''
            new_df['erwartet'] = 10**skycam.lin(new_df.vmag.values, popt[0], popt[1])
            new_df['diff'] = new_df['response'] / new_df['erwartet']
            new_df['diff2'] = (new_df['response'] / new_df['erwartet'])**(1/new_df['erwartet'])

            a = df.query('altitude > {}'.format(80*np.pi/180)).groupby('HIP').filter(lambda x : len(x) > 10).groupby('HIP').response.mean()
            a = df.join(a, on='HIP', rsuffix='r').dropna()
            '''
            fig = plt.figure()
            ax = fig.add_subplot(111)
            vmag_to_plot = np.arange(0, 6.1, 0.5)
            color = cm.jet(np.linspace(0,1,len(vmag_to_plot)))

            grouped = df.groupby('HIP')
            #remove stars that do not have a wide enough span of their altitude for plotting
            plot_df = grouped.filter(lambda x: x.altitude.max() > np.percentile(df.altitude, 95) and x.altitude.min() < np.percentile(df.altitude, 5))

            for i, vmag in enumerate(vmag_to_plot):
                c = color[i]
                # get star with magnitude closest to 'vmag'
                # ignore 2 stars with HIP because they are not good examples for the plot
                to_plot = plot_df.query(
                        'HIP == {}'.format(
                        plot_df.ix[(plot_df.query('HIP != 75312 and HIP != 52686').vmag-vmag).abs().sort(inplace=False).index[0]].HIP
                    )
                ).sort_values('altitude')

                if abs(to_plot.vmag.max() - vmag)>=0.5:
                    # dont plot, if magnitude differs too much
                    continue
               
                #maxVal = to_plot.query('altitude > {}'.format(np.percentile(to_plot.altitude, 90))).response_orig.mean()
                #popt, pcov = curve_fit(skycam.transmission2, to_plot.altitude.values, to_plot.response_orig.values, p0=[0,0.57])
                popt, pcov = curve_fit(skycam.transmission3, to_plot.altitude.values, to_plot.response_orig.values, p0=[0,0.57])

                ax.scatter(x=to_plot['altitude']/np.pi*180, y=to_plot['response_orig'], c=c, label='vmag = {}'.format(to_plot.vmag.max()))
                ax.plot(to_plot.altitude/np.pi*180, skycam.transmission2(to_plot.altitude.values, popt[0], popt[1]), c=c)
                print(vmag, to_plot.HIP.max(), popt)

            ax.semilogy()
            ax.grid()
            ax.legend(loc='upper right')
            del plot_df, to_plot
            plt.show()

            r = []

            # fit transmission for each star
            for group in grouped:
                #maxVal = group[1].query('altitude > {}'.format(np.percentile(group[1].altitude, 90))).response_orig.mean()
                x = group[1].sort_values('altitude').altitude.values
                y = group[1].sort_values('altitude').response_orig.values
                try:
                    #popt, pcov = curve_fit(skycam.transmission2, x, y, p0=[0, 0.57])
                    popt, pcov = curve_fit(skycam.transmission3, x, y, p0=[0, 0.57])
                except RuntimeError:
                    # skip group if fit does not converge
                    # this might happen in a few cases where we have a small amount of data points with dark stars that fluctuate very much
                    continue

                r.append((group[1].altitude.values.max(), popt[0], np.sqrt(pcov[0,0]), popt[1], np.sqrt(pcov[1,1]) ))


            # do a fit of all transmissions
            r = np.array(r)
            popt, pcov = curve_fit(skycam.lin, r[:,0], r[:,3], sigma=r[:,4], p0=[0,0])
            x = np.linspace(-2,8,5)
            y = skycam.lin(x, popt[0], popt[1])

            fig = plt.figure()
            ax = fig.add_subplot(111)
            plt.errorbar(r[:,0], r[:,3], yerr=r[:,4], linestyle='', color='blue', marker='o', ms=2)
            plt.plot(x,y, color='red', label='linear regression')
            plt.grid()
            plt.legend()
            plt.show()
            plt.hist(r[:,3], bins=100, range=(-1,2))
            plt.show()
            print(popt, pcov)
            del grouped


    if args['--response']:
        fig = plt.figure(figsize=(16,9))
        ax = plt.subplot(111)
        ax.semilogy()
        ax.axhspan(ymin=11**2/255**2, ymax=13**2/255**2, color='red', alpha=0.5, label='Old threshold - Gradient')
        mean.plot.scatter(x='vmag',y='response', yerr=std['response'].values, color='blue', ax=ax, logy=True, grid=True, vmin=0, vmax=1, label='{} Response'.format(args['--function']))
        #mean.plot.scatter(x='vmag',y='response_grad', yerr=std['response_grad'].values, color='red', ax=ax, logy=True, grid=True, label='Gradient Response')
        #ax.set_xlim((-1, max(mean['vmag'])+0.5))
        ax.set_ylim(bottom=10**(np.log10(np.nanpercentile(mean.response.values,10.0))//1-1),
            top=10**(np.log10(np.nanpercentile(mean.response.values,99.9))//1+1))
        x = np.linspace(-5+mean.vmag.min(), mean.vmag.max()+5, 20)
        lim = (list(map(float, split('\\s*,\\s*', config['analysis']['visibleupperlimit']))), list(map(float, split('\\s*,\\s*', config['analysis']['visiblelowerlimit']))))
        y1 = 10**(x*lim[1][0] + lim[1][1])
        y2 = 10**(x*lim[0][0] + lim[0][1])
        ax.plot(x, y1, c='red', label='lower limit')
        ax.plot(x, y2, c='green', label='upper limit')
        ax.legend(loc='best')
        ax.set_ylabel('Kernel Response')
        ax.set_xlabel('Star Magnitude')
        plt.show()
        if args['-s']:
            plt.savefig('response_{}_mean.pdf'.format(args['--function']))
        if args['-v']:
            plt.show()
        plt.close('all')
    
    if args['--cloudtrack']:
        ct = cloud_tracker.CloudTracker(config['image'])
        for cloudmap in cloudmap_list:
            ct.update(cloudmap)

        print('Tracking done')
    

    '''
    def logf(x, m, b):
        return 10**(m*x+b)

    sys.exit(0)
    fit_stars = df.query('0 < vmag < {}'.format(float(config['analysis']['vmaglimit'])))
    popt, pcov = curve_fit(logf, fit_stars.vmag.values, fit_stars.response.values, sigma=1/fit_stars.vmag.values, p0=(-0.2, 2))
    x = np.linspace(-3+fit_stars.vmag.min(), fit_stars.vmag.max(), 20)
    y = logf(x, popt[0], popt[1]-0.3)
    lim = (split('\\s*,\\s*', config['analysis']['visibleupperlimit']), split('\\s*,\\s*', config['image']['visiblelowerlimit']))
    y1 = 10**(x*float(lim[1][0]) + float(lim[1][1]))
    y2 = 10**(x*float(lim[0][0]) + float(lim[0][1]))
    '''

    '''
    fig = plt.figure(figsize=(16,9))
    ax = plt.subplot(111)
    #if args['--function'] == 'Grad':
    #ax.axhspan(ymin=11**2/255**2, ymax=13**2/255**2, color='red', alpha=0.5, label='old threshold range')
    df.loc[df.index.get_level_values(0).unique()[0]].plot.scatter(
            x='vmag',y='response', color='green', ax=ax, logy=True, grid=True, label='Kernel Response - no Moon')
    df.loc[df.index.get_level_values(0).unique()[1]].plot.scatter(
            x='vmag',y='response', color='red', ax=ax, logy=True, grid=True, label='Kernel Response - Moon')
    df.loc[df.index.get_level_values(0).unique()[2]].plot.scatter(
            x='vmag',y='response', color='k', ax=ax, logy=True, grid=True, label='Kernel Response - cloud')
    ax.set_ylim((1e-5,1))
    plt.show()
    '''



''' Main Loop '''
if __name__ == '__main__':
    args = docopt(
        doc=__doc__,
        version=__version__,
        )
    try:
        main(args)
    except (KeyboardInterrupt, SystemExit) as e:
        if len(e.args) > 0:
            logging.getLogger('starry_night').info('Shutdown due to error!')
        else:
            logging.getLogger('starry_night').info('Exit')
    except:
        raise
